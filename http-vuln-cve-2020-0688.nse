local http = require "http"
local nmap = require "nmap"
local shortport = require "shortport"
local strbuf = require "strbuf"

description = [[
Checks for disallowed entries in <code>/robots.txt</code> on a web server.

The higher the verbosity or debug level, the more disallowed entries are shown.
]]

---
--@output
--PORT    STATE SERVICE
--443/tcp open  https
--|_cve-2020-0688: (14.3.487) Exchange 2010 if < 496 then = vulnerable



author = "Frank Bussink"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"default", "discovery", "safe", "exploit"}

portrule = shortport.http
local last_len = 0

local function checkversion(w)

  local output = w .. "\n"
  if w:find("^6.5.*") ~= nil then
		output = "Exchange 2003 - Vulnerable"
  elseif w:find("^8.*") ~= nil then
		output = "Exchange 2007 - Vulnerable"
  elseif w:find("^14.*") ~= nil then
		output = "Exchange 2010 if < 496 then = vulnerable"
  elseif w:find("^15.0.*") ~= nil then
		output = "Exchange 2013 if < 1497 then = vulnerable (only 15.0.1497.6 is patched)"
  elseif w:find("^15.1.*") ~= nil then
		output = "Exchange 2016 if < 1913 then = vulnerable (only 15.1.1913.7 and 15.1.1847.7 are patched)"
  elseif w:find("^15.2.*") ~= nil then
		output = "Exchange 2019 if < 529 then = vulnerable (only 15.2.529.8 and 15.2.464.11 are patched)"
  else 
		output = "Exchange " .. w
  end
  return "(" .. w .. ") " .. output
end

-- parse all disallowed entries in body and add them to a strbuf
local function parse_answer(body)
  local found = false
  for line in body:gmatch("[^\r\n]+") do
    for w in line:gmatch('/owa/%d+.%d.%d+') do
      w = string.gsub(w,"/owa/","")
      found = true
	  return checkversion(w)
    end
  end
  if found then
	 return "no version recognized"
  end
end

action = function(host, port)
  local dis_count, noun
  local answer = http.get(host, port, "/owa" )

  if answer.status ~= 200 then
    return "Error 200 for /owa"
  end

  local v_level = nmap.verbosity() + (nmap.debugging()*2)
  local output = strbuf.new()
  local detail = 15

  output = parse_answer(answer.body)
  
  return output
end
